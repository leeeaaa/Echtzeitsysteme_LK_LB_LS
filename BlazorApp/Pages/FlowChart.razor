@page "/"
@using BlazorApp.Data
@using System.IO
@using Blazor.Diagrams.Core.Geometry
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Text;
@inject ILogger<FlowChart> Logger
@inject IWebHostEnvironment Environment
@inject CsvFileReaderService ReaderService
@inject IJSRuntime js

<PageTitle>Flow Chart</PageTitle>

<h1>FlowChart</h1>

<div class="upload-area">
	<label>
		Upload CSV File:
	</label>
	<br/>
	<InputFile OnChange="@LoadFiles" />
</div>

@if (diagramData.Tasks.Count > 0)
{
	<button class="btn btn-primary" @onclick="Step">Step</button>
}
<div class="chart-area" @ref="_renderTo"></div>
<div class="info-container">
	<div class="semaphore-list">
		<p>Semaphores</p>
		<ul>
			@foreach (var semaphore in diagramData.Semaphores)
			{
				<li class="@(semaphore.CanDecrement() ? "activeSemaphore" : "")">@semaphore.Name: @semaphore.State</li>
			}
		</ul>
	</div>

	<div class="mutex-list">
		<p>Mutexes</p>
		<ul>
			@foreach (var mutex in diagramData.Mutexes)
			{
				<li class="@(!mutex.CanDecrement() ? "activeMutex" : "")">@mutex.Name: @mutex.State</li>
			}
		</ul>
	</div>
</div>



@if (isLoading)
{
	<p>Loading...</p>
}
else
{
	@if (errors.Count > 0)
	{
		<h2>Errors</h2>
		<ul class="text-danger">
			@foreach (var error in errors)
			{
				<li>@error</li>
			}
		</ul>
	}
}


@code {
	private long maxFileSize = 1024 * 1024 * 3;
	private int maxAllowedFiles = 1;
	private bool isLoading;
	private List<string> errors = new();
	private CsvData diagramData = new();


	private async void ShowDiagram()
	{

		var diagram = @"
digraph g {
fontname = ""Helvetica,Arial,sans-serif""
node[fontname = ""Helvetica,Arial,sans-serif""]
edge[fontname = ""Helvetica,Arial,sans-serif""]
graph [rankdir = ""LR""];
node [
fontsize = ""16""
shape = ""record""
];
edge [
];
";

		StringBuilder builder = new StringBuilder(diagram);

		foreach (Data.Task task in diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				if (taskActivity.IsActive)
				{
					builder.AppendLine(@$"""{taskActivity.Name}"" [label=""{task.Name} - {taskActivity.Name}"", color=""green"", penwidth=2];");
				}
				else
				{
					builder.AppendLine(@$"""{taskActivity.Name}"" [label=""{task.Name} - {taskActivity.Name}""];");
				}

			}
		}

		foreach (Data.Semaphore semaphore in diagramData.Semaphores)
		{
			int inputIt = 0;
			int outputIt = 0;
			while (inputIt < semaphore.Inputs.Count && outputIt < semaphore.Outputs.Count)
			{
				builder.Append(@$"""{semaphore.Inputs[inputIt].Name}""->""{semaphore.Outputs[outputIt].Name}"" [label=""{semaphore.Name}""");

				if (semaphore.IsActivitySemaphore)
					builder.Append(@", arrowhead=""onormal""");
				else
					builder.Append(@", arrowhead=""normal""");

				if(semaphore.CanDecrement())
					builder.Append(@", color=""green"", penwidth=2");

				builder.AppendLine("];");

				if (inputIt < semaphore.Inputs.Count - 1) inputIt++;
				else if (outputIt < semaphore.Outputs.Count - 1) outputIt++;
				else break;
			}
		}

		foreach(Data.Mutex mutex in diagramData.Mutexes)
		{
			if (mutex.CanDecrement())
				builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon];");
			else
				builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon, color=""red"", penwidth=2];");

			foreach(var activity in mutex.Inputs)
			{
				if(!mutex.CanDecrement() && activity.IsActive)
					builder.AppendLine(@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none, color=""red"", penwidth=2];");
				else
					builder.AppendLine(@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none];");
			}
		}

		builder.Append("}");
		diagram = builder.ToString();
		await js.InvokeVoidAsync("renderDot", diagram, _renderTo);
	}

	private ElementReference _renderTo;

	private async System.Threading.Tasks.Task LoadFiles(InputFileChangeEventArgs e)
	{
		isLoading = true;
		errors.Clear();

		if (e.FileCount > maxAllowedFiles)
		{
			errors.Add($"Error: Attempting to upload {errors.Count} files, but only {maxAllowedFiles} files allowed!");
			return;
		}

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			try
			{

				await using MemoryStream fs = new();
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

				diagramData = await ReaderService.ReadCsvFileToObjectAsync(fs);
			}
			catch (Exception ex)
			{
				errors.Add($"File: {file.Name} Error: {ex.Message}");
			}
		}

		isLoading = false;
		ShowDiagram();
	}

	private void Step()
	{

		foreach (Data.Task task in diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				Console.WriteLine($"Activity: '{taskActivity.Name}', state: {taskActivity.CanProcess}");
				taskActivity.Process();
			}
		}
		

		foreach (Data.Task task in diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				taskActivity.Consume();
			}
		}

		ShowDiagram();
		Console.WriteLine("\n-----------------------\n");
		
	}
}