@page "/"
@using BlazorApp.Data
@using System.IO
@using Blazor.Diagrams.Core.Geometry
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Text;
@using Task = System.Threading.Tasks.Task
@using System.Diagnostics;
@inject ILogger<FlowChart> Logger
@inject IWebHostEnvironment Environment
@inject IJSRuntime js
@implements IDisposable

<PageTitle>Flow Chart Visualizer</PageTitle>

<div class="menu-bar">
	<div class="upload-area">
		<label class="button" for="upload">
			Upload CSV File:
		</label>
		<InputFile id="upload" OnChange="@LoadFiles" accept=".csv"/>
	</div>
	<div class="control-section">
		<button class="button" @onclick="SaveFile" disabled=@(_runningState || _stepMode || !_chartLoaded)>Save Current State</button>
		<button class="button" @onclick="StartAnimation" disabled=@(_runningState || _stepMode || !_chartLoaded)>Start</button>
		<button class="button" @onclick="StopAnimation" disabled=@(!_runningState || _stepMode || !_chartLoaded)>Stop</button>
		<button class="button" @onclick="StepAnimation" disabled=@(_runningState || _stepMode || !_chartLoaded)>Step</button>
		<button class="button" @onclick="Reset" disabled=@(_runningState || _stepMode || !_chartLoaded)>Reset</button>
		<div class="animation-speed-control">
			<input type="range" min="100" max="2000" step="10"
			       value="@_timerInterval" @oninput="@((args) => ChangeTimerInterval(args.Value?.ToString()))"
			       disabled=@_runningState />
			<label>Time interval: @_timerInterval ms</label>
		</div>
	</div>
</div>

<div class="content">
	<div id="chart" class="chart-area" @ref="_renderTo"></div>

	<div class="info-container">
		<div class="card">
			<p>Semaphores</p>
			<div class="list">
				@foreach (var semaphore in _diagramData.Semaphores)
				{

					<div class="list-item">
						<p class="@(semaphore.CanDecrement() ? "activeSemaphore" : "")">@semaphore.Name: @semaphore.State</p>
					</div>
				}
			</div>
		</div>

		<div class="card">
			<p>Mutexes</p>
			<div class="list">
				@foreach (var mutex in _diagramData.Mutexes)
				{
					<div class="list-item">
						<p class="@(!mutex.CanDecrement() ? "activeMutex" : "")">@mutex.Name: @mutex.State</p>
					</div>
				}
			</div>
		</div>
		<div class="card">
			<label>Time units passed: @_timeUnitsPassed</label>
		</div>
	</div>
</div>

@if (_isLoading)
{
	<p>Loading...</p>
}
else
{
	@if (_errors.Count > 0)
	{
		<h2>Errors</h2>
		<ul class="text-danger">
			@foreach (var error in _errors)
			{
				<li>@error</li>
			}
		</ul>
	}
}

@code {
	private const long MaxFileSize = 1024 * 1024 * 3;
	private const int MaxAllowedFiles = 1;
	private bool _isLoading;
	private List<string> _errors = new();
	private DiagramData _diagramData = new();
	private bool _runningState = false;
	private int _timerInterval = 1000;
	private long _timeUnitsPassed = 0;
	private Timer? _timer;
	private bool _stepMode = false;
	private int _animationState = 0;
	private bool _shouldStop;

	private bool _chartLoaded { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
		_timer = new Timer(async _ =>
		{
			Step();
		}, null, Timeout.Infinite, _timerInterval);
	}


	private async void ShowDiagram()
	{

		var diagram = @"
digraph g {
fontname = ""Helvetica,Arial,sans-serif""
node[fontname = ""Helvetica,Arial,sans-serif""]
edge[fontname = ""Helvetica,Arial,sans-serif""]
graph [rankdir = ""LR""];
node [
fontsize=""16""
shape =""record""
label=""""
];
edge [
];
";

		StringBuilder builder = new StringBuilder(diagram);

		AddTasks(builder);

		AddSemaphores(builder);

		AddMutexes(builder);

		// finalize string
		builder.Append("}");
		diagram = builder.ToString();

		// call js method to render the diagram
		// the js function can be found in Pages\_Host.cshtml
		js.InvokeVoidAsync("renderDot", diagram, _renderTo);
		InvokeAsync(StateHasChanged);
	}

	private void AddMutexes(StringBuilder builder)
	{
		foreach (Data.Mutex mutex in _diagramData.Mutexes)
		{
			if (mutex.CanDecrement())
				builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon];");
			else
				builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon, color=""red"", penwidth=2];");

			foreach (var activity in mutex.Inputs)
			{
				if (!mutex.CanDecrement() && activity.IsActive)
					builder.AppendLine(
						@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none, color=""red"", penwidth=2];");
				else
					builder.AppendLine(@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none];");
			}
		}
	}

	private void AddSemaphores(StringBuilder builder)
	{
		var tempNumber = 0;
		foreach (Data.Semaphore semaphore in _diagramData.Semaphores)
		{
			if (semaphore.Inputs.Count > 1 || semaphore.Outputs.Count > 1)
			{
				builder.AppendLine(@$"""{tempNumber}"" [shape=point];");

				foreach (var input in semaphore.Inputs)
				{
					builder.Append(@$"""{input.Name}""->""{tempNumber}"" [label=""{semaphore.Name}"", arrowhead=""none""");

					if (semaphore.CanDecrement())
						builder.Append(@", color=""green"", penwidth=2");

					builder.AppendLine("];");
				}

				foreach (var output in semaphore.Outputs)
				{
					builder.Append(@$"""{tempNumber}""->""{output.Name}"" [label=""{semaphore.Name}""");

					if (semaphore.IsActivitySemaphore)
						builder.Append(@", arrowhead=""onormal""");
					else
						builder.Append(@", arrowhead=""normal""");

					if (semaphore.CanDecrement())
						builder.Append(@", color=""green"", penwidth=2");

					builder.AppendLine("];");
				}

				tempNumber++;
			}
			else
			{
				builder.Append(
					@$"""{semaphore.Inputs[0].Name}""->""{semaphore.Outputs[0].Name}"" [label=""{semaphore.Name}""");
				if (semaphore.IsActivitySemaphore)
					builder.Append(@", arrowhead=""onormal""");
				else
					builder.Append(@", arrowhead=""normal""");

				if (semaphore.CanDecrement())
					builder.Append(@", color=""green"", penwidth=2");

				builder.AppendLine("];");
			}
		}
	}

	private void AddTasks(StringBuilder builder)
	{
		foreach (Data.Task task in _diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				builder.Append(@$"""{taskActivity.Name}"" [label=""<f0> {task.Name} |<f1> {taskActivity.Name} ");

				if(!taskActivity.IsActive)
					builder.Append(@$"|<f2> {taskActivity.ProcessDuration}""");

				if (taskActivity.IsActive)
				{
					builder.Append(@$"|<f2> {taskActivity.ProcessTime + 1}/{taskActivity.ProcessDuration}""");
					builder.Append(@$", color=""green"", penwidth=2");
				}

				builder.AppendLine("];");
			}
		}
	}

	private ElementReference _renderTo;

	private async System.Threading.Tasks.Task LoadFiles(InputFileChangeEventArgs e)
	{
		_isLoading = true;
		_errors.Clear();

		if (e.FileCount > MaxAllowedFiles)
		{
			_errors.Add($"Error: Attempting to upload {_errors.Count} files, but only {MaxAllowedFiles} files allowed!");
			return;
		}

		foreach (var file in e.GetMultipleFiles(MaxAllowedFiles))
		{
			try
			{
				await using MemoryStream fs = new();
				await file.OpenReadStream(MaxFileSize).CopyToAsync(fs);

				_diagramData = await CsvFileReaderService.ReadCsvFileToObjectAsync(fs);
			}
			catch (Exception ex)
			{
				_errors.Add($"File: {file.Name} Error: {ex.Message}");
			}
		}

		_isLoading = false;
		_chartLoaded = true;

		Reset();
	}

	private async void SaveFile(){
		var element = await js.InvokeAsync<string>("getElement");
		Console.WriteLine(element);
		await js.InvokeAsync<object>("saveFile", element);
	}

	private void Step()
	{
		if (_animationState++ == 0)
		{
			foreach (Data.Task task in _diagramData.Tasks)
			{
				foreach (var taskActivity in task.Activities)
				{
					taskActivity.Consume();
				}
			}
		}
		else
		{
			foreach (Data.Task task in _diagramData.Tasks)
			{
				foreach (var taskActivity in task.Activities)
				{
					Console.WriteLine($"Activity: '{taskActivity.Name}', state: {taskActivity.CanProcess}");
					taskActivity.Process();
				}
			}
			_timeUnitsPassed++;
			_animationState=0;
			if (_stepMode || _shouldStop)
			{
				_timer?.Change(Timeout.Infinite, Timeout.Infinite);
				_runningState = false;
				_stepMode = false;
				_shouldStop = false;
			}
		}

		ShowDiagram();
		Console.WriteLine("\n-----------------------\n");
		
	}

	private void StepAnimation()
	{
		_stepMode = true;
		StartAnimation();
	}

	private void StartAnimation()
	{
		_timer?.Change(0, _timerInterval);
		_runningState = true;
	}

	private void StopAnimation()
	{
		_shouldStop = true;
	}

	private void ChangeTimerInterval(string? timerVal)
	{
		if (timerVal == null)
			_timerInterval = 1000;
		else
			_timerInterval = Int32.Parse(timerVal);
		_timer?.Change(Timeout.Infinite, _timerInterval);
	}

	private async void Reset()
	{
		_timer?.Change(Timeout.Infinite, Timeout.Infinite);
		_runningState = false;
		_stepMode = false;
		_timeUnitsPassed = 0;
		_diagramData = await CsvFileReaderService.RestoreInitialState(_diagramData);
		ShowDiagram();
	}


	public void Dispose()
	{
		_timer?.Dispose();
	}
}