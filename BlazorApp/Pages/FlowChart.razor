@page "/"
@using BlazorApp.Data
@using System.IO
@using Blazor.Diagrams.Core.Geometry
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Text;
@using Task = System.Threading.Tasks.Task
@inject ILogger<FlowChart> Logger
@inject IWebHostEnvironment Environment
@inject CsvFileReaderService ReaderService
@inject IJSRuntime js
@implements IDisposable

<PageTitle>Flow Chart</PageTitle>

<h1>FlowChart</h1>

<div class="upload-area">
	<label>
		Upload CSV File:
	</label>
	<br/>
	<InputFile OnChange="@LoadFiles" />
</div>

<div style="display: @(_diagramData.Tasks.Count > 0 ? "" : "none")">
	<div class="control-buttons">
		<button class="btn btn-primary" @onclick="StartAnimation">Start</button>
		<button class="btn btn-primary" @onclick="StopAnimation">Stop</button>
		<button class="btn btn-primary" @onclick="Step">Step</button>
	</div>
	<label>Animation interval: @_timerInterval ms</label>
	<br />
	<input type="range" min="100" max="2000" step="10"
	       value="@_timerInterval" @oninput="@((args) => ChangeTimerInterval(args.Value.ToString()))"
	       disabled=@_runningState/>


	<div class="chart-area" @ref="_renderTo"></div>

	<div class="info-container">
		<div class="semaphore-list">
			<p>Semaphores</p>
			<ul>
				@foreach (var semaphore in _diagramData.Semaphores)
				{
					<li class="@(semaphore.CanDecrement() ? "activeSemaphore" : "")">@semaphore.Name: @semaphore.State</li>
				}
			</ul>
		</div>

		<div class="mutex-list">
			<p>Mutexes</p>
			<ul>
				@foreach (var mutex in _diagramData.Mutexes)
				{
					<li class="@(!mutex.CanDecrement() ? "activeMutex" : "")">@mutex.Name: @mutex.State</li>
				}
			</ul>
		</div>
	</div>
</div>



@if (_isLoading)
{
	<p>Loading...</p>
}
else
{
	@if (_errors.Count > 0)
	{
		<h2>Errors</h2>
		<ul class="text-danger">
			@foreach (var error in _errors)
			{
				<li>@error</li>
			}
		</ul>
	}
}


@code {
	private readonly long _maxFileSize = 1024 * 1024 * 3;
	private readonly int _maxAllowedFiles = 1;
	private bool _isLoading;
	private List<string> _errors = new();
	private CsvData _diagramData = new();
	private List<Semaphore> _startSemaphores = new();
	private bool _runningState = false;
	private int _timerInterval = 1000;
	private System.Threading.Timer _timer;
	private int _stepState = 0;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		_timer = new System.Threading.Timer(async _ =>
		{
			Step();
		}, null, Timeout.Infinite, _timerInterval);
	}


	private async void ShowDiagram()
	{

		var diagram = @"
digraph g {
fontname = ""Helvetica,Arial,sans-serif""
node[fontname = ""Helvetica,Arial,sans-serif""]
edge[fontname = ""Helvetica,Arial,sans-serif""]
graph [rankdir = ""LR""];
node [
fontsize=""16""
shape =""record""
label=""""
];
edge [
];
";

		StringBuilder builder = new StringBuilder(diagram);

		AddTasks(builder);

		AddSemaphores(builder);

		AddMutexes(builder);

		// finalize string
		builder.Append("}");
		diagram = builder.ToString();

		// call js method to render the diagram
		// the js function can be found in Pages\_Host.cshtml
		await js.InvokeVoidAsync("renderDot", diagram, _renderTo);
	}

	private void AddMutexes(StringBuilder builder)
	{
		foreach (Data.Mutex mutex in _diagramData.Mutexes)
		{
			if (mutex.CanDecrement())
				builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon];");
			else
				builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon, color=""red"", penwidth=2];");

			foreach (var activity in mutex.Inputs)
			{
				if (!mutex.CanDecrement() && activity.IsActive)
					builder.AppendLine(
						@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none, color=""red"", penwidth=2];");
				else
					builder.AppendLine(@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none];");
			}
		}
	}

	private void AddSemaphores(StringBuilder builder)
	{
		var tempNumber = 0;
		foreach (Data.Semaphore semaphore in _diagramData.Semaphores)
		{
			if (semaphore.Inputs.Count > 1 || semaphore.Outputs.Count > 1)
			{
				builder.AppendLine(@$"""{tempNumber}"" [shape=point];");

				foreach (var input in semaphore.Inputs)
				{
					builder.Append(@$"""{input.Name}""->""{tempNumber}"" [label=""{semaphore.Name}"", arrowhead=""none""");

					if (semaphore.CanDecrement())
						builder.Append(@", color=""green"", penwidth=2");

					builder.AppendLine("];");
				}

				foreach (var output in semaphore.Outputs)
				{
					builder.Append(@$"""{tempNumber}""->""{output.Name}"" [label=""{semaphore.Name}""");

					if (semaphore.IsActivitySemaphore)
						builder.Append(@", arrowhead=""onormal""");
					else
						builder.Append(@", arrowhead=""normal""");

					if (semaphore.CanDecrement())
						builder.Append(@", color=""green"", penwidth=2");

					builder.AppendLine("];");
				}

				tempNumber++;
			}
			else
				{
				builder.Append(
					@$"""{semaphore.Inputs[0].Name}""->""{semaphore.Outputs[0].Name}"" [label=""{semaphore.Name}""");
				if (semaphore.IsActivitySemaphore)
					builder.Append(@", arrowhead=""onormal""");
				else
					builder.Append(@", arrowhead=""normal""");

				if (semaphore.CanDecrement())
					builder.Append(@", color=""green"", penwidth=2");

				builder.AppendLine("];");
			}
		}
	}

	private void AddTasks(StringBuilder builder)
	{
		foreach (Data.Task task in _diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				if (taskActivity.IsActive)
				{
					builder.AppendLine(
						@$"""{taskActivity.Name}"" [label=""<f0> {task.Name} |<f1> {taskActivity.Name}"", color=""green"", penwidth=2];");
				}
				else
				{
					builder.AppendLine(@$"""{taskActivity.Name}"" [label=""<f0> {task.Name} |<f1> {taskActivity.Name}""];");
				}
			}
		}
	}

	private ElementReference _renderTo;

	private async System.Threading.Tasks.Task LoadFiles(InputFileChangeEventArgs e)
	{
		_isLoading = true;
		_errors.Clear();

		if (e.FileCount > _maxAllowedFiles)
		{
			_errors.Add($"Error: Attempting to upload {_errors.Count} files, but only {_maxAllowedFiles} files allowed!");
			return;
		}

		foreach (var file in e.GetMultipleFiles(_maxAllowedFiles))
		{
			try
			{
				await using MemoryStream fs = new();
				await file.OpenReadStream(_maxFileSize).CopyToAsync(fs);

				_diagramData = await ReaderService.ReadCsvFileToObjectAsync(fs);
			}
			catch (Exception ex)
			{
				_errors.Add($"File: {file.Name} Error: {ex.Message}");
			}
		}

		_isLoading = false;

		SaveStartSemaphores();

		ShowDiagram();
	}

	private void SaveStartSemaphores()
	{
		foreach (var semaphore in _diagramData.Semaphores)
		{
			if(semaphore.State > 0)
				_startSemaphores.Add(semaphore);
		}
	}

	private void Step()
	{
		if (_stepState++ == 0)
		{
			foreach (Data.Task task in _diagramData.Tasks)
			{
				foreach (var taskActivity in task.Activities)
				{
					Console.WriteLine($"Activity: '{taskActivity.Name}', state: {taskActivity.CanProcess}");
					taskActivity.Process();
				}
			}
		}
		else
		{
			foreach (Data.Task task in _diagramData.Tasks)
			{
				foreach (var taskActivity in task.Activities)
				{
					taskActivity.Consume();
				}
			}
			_stepState = 0;
		}

		ShowDiagram();
		Console.WriteLine("\n-----------------------\n");
	}

	private void StartAnimation()
	{
		_timer.Change(0, _timerInterval);
		_runningState = true;
	}

	private void StopAnimation()
	{
		_timer.Change(Timeout.Infinite, Timeout.Infinite);
		_runningState = false;
	}

	private void ChangeTimerInterval(string? timerVal)
	{
		_timerInterval = Int32.Parse(timerVal);
		_timer.Change(Timeout.Infinite, _timerInterval);
	}


	public void Dispose()
	{
		_timer?.Dispose();
	}
}