@page "/flowchart"
@using BlazorApp.Data
@using System.IO
@using Blazor.Diagrams.Core.Geometry
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Text;
@inject ILogger<FlowChart> Logger
@inject IWebHostEnvironment Environment
@inject CsvFileReaderService ReaderService
@inject IJSRuntime js

<PageTitle>Flow Chart</PageTitle>

<h1>FlowChart</h1>

<p>
	<label>
		Upload CSV File
		<InputFile OnChange="@LoadFiles" />
	</label>
</p>

@if (diagramData.Tasks.Count > 0)
{
	<button class="btn btn-primary" @onclick="Step">Step</button>
}

<div @ref="_renderTo"></div>


@if (isLoading)
{
	<p>Uploading...</p>
}
else
{
	@if (errors.Count > 0)
	{
		<h2>Errors</h2>
		<ul class="text-danger">
			@foreach (var error in errors)
			{
				<li>@error</li>
			}
		</ul>
	}
}


@code {
	private long maxFileSize = 1024 * 1024 * 3;
	private int maxAllowedFiles = 1;
	private bool isLoading;
	private List<string> errors = new();
	private CsvData diagramData = new();

	private Diagram Diagram { get; set; }


	protected override void OnInitialized()
	{
		base.OnInitialized();

		var options = new DiagramOptions
		{
		};

		Diagram = new Diagram(options);
	}

	private NodeModel NewNode(double x, double y)
	{
		var node = new NodeModel(new Point(x, y));
		return node;
	}

	private async void ShowDiagram()
	{
		/*var diagram = """"
		digraph finite_state_machine {
		fontname = "Helvetica,Arial,sans-serif"
		node[fontname = "Helvetica,Arial,sans-serif"]
		edge[fontname = "Helvetica,Arial,sans-serif"]
			rankdir = LR;
			node[shape = rectangle]; 0 3 4 8;
			node[shape = circle];
			0-> 2[label = "SS(B)"];
			0-> 1[label = "SS(S)"];
			1-> 3[label = "S($end)"];
			2-> 6[label = "SS(b)"];
			2-> 5[label = "SS(a)"];
			2-> 4[label = "S(A)"];
			5-> 7[label = "S(b)"];
			5-> 5[label = "S(a)"];
			6-> 6[label = "S(b)"];
			6-> 5[label = "S(a)"];
			7-> 8[label = "S(b)"];
			7-> 5[label = "S(a)"];
			8-> 6[label = "S(b)"];
			8-> 5[label = "S(a)"];
		}
		"""";*/
		var diagram = @"
digraph g {
fontname = ""Helvetica,Arial,sans-serif""
node[fontname = ""Helvetica,Arial,sans-serif""]
edge[fontname = ""Helvetica,Arial,sans-serif""]
graph [rankdir = ""LR""];
node [
fontsize = ""16""
shape = ""record""
];
edge [
];
";

		StringBuilder builder = new StringBuilder(diagram);

		foreach (Data.Task task in diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				if (taskActivity.IsActive)
				{
					builder.AppendLine(@$"""{taskActivity.Name}"" [label=""{task.Name} - {taskActivity.Name}"", color=""green""];");
				}
				else
				{
					builder.AppendLine(@$"""{taskActivity.Name}"" [label=""{task.Name} - {taskActivity.Name}""];");
				}

			}
		}

		foreach (Data.Semaphore semaphore in diagramData.Semaphores)
		{
			int inputIt = 0;
			int outputIt = 0;
			while (inputIt < semaphore.Inputs.Count && outputIt < semaphore.Outputs.Count)
			{
				if (semaphore.IsActivitySemaphore)
					builder.AppendLine(@$"""{semaphore.Inputs[inputIt].Name}""->""{semaphore.Outputs[outputIt].Name}"" [label=""{semaphore.Name}"", arrowhead=""open""];");
				else
					builder.AppendLine(@$"""{semaphore.Inputs[inputIt].Name}""->""{semaphore.Outputs[outputIt].Name}"" [label=""{semaphore.Name}"", arrowhead=""normal""];");

				if (inputIt < semaphore.Inputs.Count - 1) inputIt++;
				else if (outputIt < semaphore.Outputs.Count - 1) outputIt++;
				else break;
			}
		}

		foreach(Data.Mutex mutex in diagramData.Mutexes)
		{
			builder.AppendLine(@$"""{mutex.Name}"" [label=""{mutex.Name}"",shape=hexagon];");
			foreach(var activity in mutex.Inputs)
			{
				builder.AppendLine(@$"""{activity.Name}"" -> ""{mutex.Name}"" [arrowhead=none];");
			}
		}

		builder.Append("}");
		diagram = builder.ToString();
		await js.InvokeVoidAsync("renderDot", diagram, _renderTo);
	}

	private ElementReference _renderTo;

	private async System.Threading.Tasks.Task LoadFiles(InputFileChangeEventArgs e)
	{
		isLoading = true;
		errors.Clear();

		if (e.FileCount > maxAllowedFiles)
		{
			errors.Add($"Error: Attempting to upload {errors.Count} files, but only {maxAllowedFiles} files allowed!");
			return;
		}

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			try
			{

				await using MemoryStream fs = new();
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

				diagramData = await ReaderService.ReadCsvFileToObjectAsync(fs);
			}
			catch (Exception ex)
			{
				errors.Add($"File: {file.Name} Error: {ex.Message}");
			}
		}

		isLoading = false;
		ShowDiagram();
	}

	private void Step()
	{

		foreach (Data.Task task in diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				taskActivity.Consume();
			}
		}
		ShowDiagram();
		foreach (Data.Task task in diagramData.Tasks)
		{
			foreach (var taskActivity in task.Activities)
			{
				Console.WriteLine($"Activity: '{taskActivity.Name}', state: {taskActivity.CanProcess}");
				taskActivity.Process();
			}
		}

		Console.WriteLine("\n-----------------------\n");
		
	}
}